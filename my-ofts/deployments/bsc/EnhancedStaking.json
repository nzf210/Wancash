{
  "address": "0xf727Ab0F8d7fb9B2FAC36fa00c3Ad27c401d2fe4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isTokenChangeable",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "lockPeriod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        }
      ],
      "name": "LockOptionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum EnhancedStaking.LockPeriod",
          "name": "lockPeriod",
          "type": "uint8"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "TokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canUnstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newToken",
          "type": "address"
        }
      ],
      "name": "changeStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableTokenChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enaableTokenChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EnhancedStaking.LockPeriod",
          "name": "_lockPeriod",
          "type": "uint8"
        }
      ],
      "name": "getLockOption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getRemainingLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "enum EnhancedStaking.LockPeriod",
          "name": "lockPeriod",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lockEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "potentialReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTokenChangeable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "lockOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_lockPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "setLockOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "setTokenDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum EnhancedStaking.LockPeriod",
          "name": "_lockPeriod",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "enum EnhancedStaking.LockPeriod",
          "name": "lockPeriod",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa613590a6f156d70a19349f42af621eabe936d5770280b03c8c4e9b4e5d3d613",
  "receipt": {
    "to": null,
    "from": "0x7b97A7a3688ab41e5129D5b252de0c332697813d",
    "contractAddress": "0xf727Ab0F8d7fb9B2FAC36fa00c3Ad27c401d2fe4",
    "transactionIndex": 1,
    "gasUsed": "1748585",
    "logsBloom": "0x
    "blockHash": "0x778acef6558c28e50ec7915fc1a875dbe642eaedc6956f44cd4d4a673ab78559",
    "transactionHash": "0xa613590a6f156d70a19349f42af621eabe936d5770280b03c8c4e9b4e5d3d613",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 62206765,
        "transactionHash": "0xa613590a6f156d70a19349f42af621eabe936d5770280b03c8c4e9b4e5d3d613",
        "address": "0xf727Ab0F8d7fb9B2FAC36fa00c3Ad27c401d2fe4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b97a7a3688ab41e5129d5b252de0c332697813d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x778acef6558c28e50ec7915fc1a875dbe642eaedc6956f44cd4d4a673ab78559"
      }
    ],
    "blockNumber": 62206765,
    "cumulativeGasUsed": "1776264",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1A3c41392caF81aa7281EFaADC73C653064D22A1",
    true
  ],
  "numDeployments": 5,
  "solcInputHash": "9ce599b4529f2ca23ac994357714b089",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTokenChangeable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lockPeriod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"LockOptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum EnhancedStaking.LockPeriod\",\"name\":\"lockPeriod\",\"type\":\"uint8\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"changeStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTokenChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enaableTokenChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EnhancedStaking.LockPeriod\",\"name\":\"_lockPeriod\",\"type\":\"uint8\"}],\"name\":\"getLockOption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRemainingLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"enum EnhancedStaking.LockPeriod\",\"name\":\"lockPeriod\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"potentialReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenChangeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lockOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_lockPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setLockOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setTokenDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum EnhancedStaking.LockPeriod\",\"name\":\"_lockPeriod\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"enum EnhancedStaking.LockPeriod\",\"name\":\"lockPeriod\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnhancedStaking.sol\":\"EnhancedStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/EnhancedStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract EnhancedStaking is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public tokenDecimals = 18;\\n    IERC20 public stakingToken;\\n    bool public isTokenChangeable;\\n    \\n    // Lock period options\\n    enum LockPeriod { \\n        THREE_MONTHS,  // 0\\n        SIX_MONTHS,    // 1\\n        ONE_YEAR,      // 2\\n        TWO_YEARS,     // 3\\n        THREE_YEARS    // 4\\n    }\\n    \\n    struct LockOption {\\n        uint256 duration;      // Duration in seconds\\n        uint256 rewardRate;    // Reward rate in percentage (80 = 80%)\\n    }\\n    \\n    struct Stake {\\n        uint256 amount;\\n        uint256 startTime;\\n        LockPeriod lockPeriod;\\n        bool isLocked;\\n    }\\n    \\n    mapping(address => Stake) public stakes;\\n    mapping(uint8 => LockOption) public lockOptions;\\n    uint256 public totalStaked;\\n    \\n    event Staked(address indexed user, uint256 amount, LockPeriod lockPeriod);\\n    event Unstaked(address indexed user, uint256 amount, uint256 reward);\\n    event EmergencyUnstaked(address indexed user, uint256 amount);\\n    event LockOptionUpdated(uint8 lockPeriod, uint256 duration, uint256 rewardRate);\\n    event TokenChanged(address indexed oldToken, address indexed newToken);\\n    \\n    constructor(address _stakingToken, bool _isTokenChangeable) Ownable(msg.sender) {\\n        stakingToken = IERC20(_stakingToken);\\n        isTokenChangeable = _isTokenChangeable;\\n        \\n        // Initialize default lock options\\n        // lockOptions[0] = LockOption(90 days, 15);     // 3 months = 15%\\n        // lockOptions[1] = LockOption(180 days, 35);    // 6 months = 35%\\n        // lockOptions[2] = LockOption(365 days, 80);    // 1 year = 80%\\n        // lockOptions[3] = LockOption(730 days, 200);   // 2 years = 200%\\n        // lockOptions[4] = LockOption(1095 days, 500);  // 3 years = 500%\\n\\n        // Initialize default lock options\\n        lockOptions[0] = LockOption(3 minutes, 15);     // 3 minutes = 15%\\n        lockOptions[1] = LockOption(5 minutes, 33);    // 5 minutes = 3%\\n        lockOptions[2] = LockOption(60 minutes, 80);    // 1 Hour = 8%\\n        lockOptions[3] = LockOption(120 minutes, 200);   // 2 Hour = 20%\\n        lockOptions[4] = LockOption(180 minutes, 500);  // 3 Hour = 50%\\n    }\\n    \\n    // Owner can update lock options\\n    function setLockOption(\\n        uint8 _lockPeriod, \\n        uint256 _duration, \\n        uint256 _rewardRate\\n    ) external onlyOwner {\\n        require(_lockPeriod <= 4, \\\"Invalid lock period\\\");\\n        require(_duration > 0, \\\"Duration must be > 0\\\");\\n        require(_rewardRate > 0, \\\"Reward rate must be > 0\\\");\\n        \\n        lockOptions[_lockPeriod] = LockOption(_duration, _rewardRate);\\n        emit LockOptionUpdated(_lockPeriod, _duration, _rewardRate);\\n    }\\n    \\n    // Owner can change the staking token (if allowed)\\n    function changeStakingToken(address _newToken) external onlyOwner {\\n        require(isTokenChangeable, \\\"Token change is disabled\\\");\\n        require(_newToken != address(0), \\\"Invalid token address\\\");\\n        require(totalStaked == 0, \\\"Cannot change token when there are active stakes\\\");\\n        \\n        emit TokenChanged(address(stakingToken), _newToken);\\n        stakingToken = IERC20(_newToken);\\n    }\\n    \\n    function disableTokenChange() external onlyOwner {\\n        isTokenChangeable = false;\\n    }\\n    \\n    function enaableTokenChange() external onlyOwner {\\n        isTokenChangeable = true;\\n    }\\n    \\n    function stake(uint256 _amount, LockPeriod _lockPeriod) external nonReentrant {\\n        require(_amount > 0, \\\"Amount must be > 0\\\");\\n        require(uint8(_lockPeriod) <= 4, \\\"Invalid lock period\\\");\\n        require(stakes[msg.sender].amount == 0, \\\"Already have active stake\\\");\\n\\n        uint8 decimals = getTokenDecimals();\\n        uint256 normalizedAmount = _amount * (10 ** decimals);\\n        \\n        uint256 balanceBefore = stakingToken.balanceOf(address(this));\\n        stakingToken.safeTransferFrom(msg.sender, address(this), normalizedAmount);\\n        uint256 actualReceived = stakingToken.balanceOf(address(this)) - balanceBefore;\\n\\n        stakes[msg.sender] = Stake({\\n            amount: actualReceived,\\n            startTime: block.timestamp,\\n            lockPeriod: _lockPeriod,\\n            isLocked: true\\n        });\\n        \\n        totalStaked += actualReceived;\\n        emit Staked(msg.sender, actualReceived, _lockPeriod);\\n    }\\n    \\n    function setTokenDecimals(uint8 _decimals) external onlyOwner {\\n        tokenDecimals = _decimals;\\n    }\\n\\n    function getTokenDecimals() public view returns (uint8) {\\n        try IERC20Metadata(address(stakingToken)).decimals() returns (uint8 decimalPlaces) {\\n            return decimalPlaces;\\n        } catch {\\n            return 18; // Default ke 18 jika tidak ada fungsi decimals\\n        }\\n    }\\n\\n    function unstake() external nonReentrant {\\n        Stake memory userStake = stakes[msg.sender];\\n        require(userStake.amount > 0, \\\"No stake\\\");\\n        require(userStake.isLocked, \\\"Stake not active\\\");\\n        \\n        LockOption memory lockOpt = lockOptions[uint8(userStake.lockPeriod)];\\n        \\n        // Check if lock period has been completed\\n        require(\\n            block.timestamp >= userStake.startTime + lockOpt.duration,\\n            \\\"Lock period not completed\\\"\\n        );\\n        \\n        uint256 reward = calculateReward(msg.sender);\\n        uint256 totalAmount = userStake.amount + reward;\\n        \\n        totalStaked -= userStake.amount;\\n        delete stakes[msg.sender];\\n        \\n        // Transfer principal + reward\\n        stakingToken.safeTransfer(msg.sender, totalAmount);\\n        emit Unstaked(msg.sender, userStake.amount, reward);\\n    }\\n    \\n    // Emergency unstake - only returns principal, no rewards\\n    function emergencyUnstake() external nonReentrant {\\n        Stake memory userStake = stakes[msg.sender];\\n        require(userStake.amount > 0, \\\"No stake\\\");\\n        require(userStake.isLocked, \\\"Stake not active\\\");\\n        \\n        uint256 contractBalance = stakingToken.balanceOf(address(this));\\n        uint256 amountToWithdraw = userStake.amount > contractBalance \\n            ? contractBalance \\n            : userStake.amount;\\n        \\n        // Update state before transfer (Checks-Effects-Interactions pattern)\\n        totalStaked -= userStake.amount;\\n        delete stakes[msg.sender];\\n        \\n        // Transfer available amount (may be less than staked amount)\\n        if (amountToWithdraw > 0) {\\n            stakingToken.safeTransfer(msg.sender, amountToWithdraw);\\n        }\\n        \\n        emit EmergencyUnstaked(msg.sender, amountToWithdraw);\\n    }\\n    \\n    function calculateReward(address _user) public view returns (uint256) {\\n        Stake memory userStake = stakes[_user];\\n        if (userStake.amount == 0 || !userStake.isLocked) return 0;\\n        \\n        LockOption memory lockOpt = lockOptions[uint8(userStake.lockPeriod)];\\n        if (block.timestamp < userStake.startTime + lockOpt.duration) return 0;\\n        \\n        return (userStake.amount * lockOpt.rewardRate) / 100;\\n    }\\n    \\n    // View functions\\n    function getStakeInfo(address _user) external view returns (\\n        uint256 amount,\\n        uint256 startTime,\\n        LockPeriod lockPeriod,\\n        bool isLocked,\\n        uint256 lockEndTime,\\n        uint256 potentialReward\\n    ) {\\n        Stake memory userStake = stakes[_user];\\n        LockOption memory lockOpt = lockOptions[uint8(userStake.lockPeriod)];\\n        \\n        return (\\n            userStake.amount,\\n            userStake.startTime,\\n            userStake.lockPeriod,\\n            userStake.isLocked,\\n            userStake.startTime + lockOpt.duration,\\n            calculateReward(_user)\\n        );\\n    }\\n    \\n    function getLockOption(LockPeriod _lockPeriod) external view returns (\\n        uint256 duration,\\n        uint256 rewardRate\\n    ) {\\n        LockOption memory lockOpt = lockOptions[uint8(_lockPeriod)];\\n        return (lockOpt.duration, lockOpt.rewardRate);\\n    }\\n    \\n    function getRemainingLockTime(address _user) external view returns (uint256) {\\n        Stake memory userStake = stakes[_user];\\n        if (userStake.amount == 0 || !userStake.isLocked) return 0;\\n        \\n        LockOption memory lockOpt = lockOptions[uint8(userStake.lockPeriod)];\\n        uint256 lockEndTime = userStake.startTime + lockOpt.duration;\\n        \\n        if (block.timestamp >= lockEndTime) return 0;\\n        return lockEndTime - block.timestamp;\\n    }\\n    \\n    function canUnstake(address _user) external view returns (bool) {\\n        Stake memory userStake = stakes[_user];\\n        if (userStake.amount == 0 || !userStake.isLocked) return false;\\n        \\n        LockOption memory lockOpt = lockOptions[uint8(userStake.lockPeriod)];\\n        return block.timestamp >= userStake.startTime + lockOpt.duration;\\n    }\\n}\",\"keccak256\":\"0x8fdc575a2c89674522166ff03d7aad11116a4e542fa1a58fcc6b80c8f80eee43\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c35780638da5cb5b1161007c5780638da5cb5b146102e7578063c3453153146102f8578063d82e39621461031d578063d8f2438f14610330578063f2cf47be14610357578063f2fde38b1461036a57600080fd5b8063715018a61461028857806372f702f3146102905780637589cf2f146102bb578063817b1cd2146102c357806385f4498b146102cc5780638acf3332146102df57600080fd5b8063285d333b11610115578063285d333b1461020c5780632def66201461021f5780633b97e85614610227578063473044941461023b578063512808061461025c57806361b774ce1461026457600080fd5b80630a6aab6c146101525780630b3d738b1461017f57806310087fb11461019457806316934fc4146101a757806324f65ee7146101f2575b600080fd5b6101656101603660046115cf565b61037d565b604080519283526020830191909152015b60405180910390f35b61019261018d366004611600565b6103d3565b005b6101926101a2366004611635565b610536565b6101e26101b5366004611661565b60036020526000908152604090208054600182015460029092015490919060ff8082169161010090041684565b60405161017694939291906116c2565b6101fa61086a565b60405160ff9091168152602001610176565b61019261021a366004611661565b6108df565b610192610a53565b6001546101fa90600160a01b900460ff1681565b61024e610249366004611661565b610cbe565b604051908152602001610176565b610192610dde565b60025461027890600160a01b900460ff1681565b6040519015158152602001610176565b610192610dfb565b6002546102a3906001600160a01b031681565b6040516001600160a01b039091168152602001610176565b610192610e0d565b61024e60055481565b6102786102da366004611661565b61102e565b610192611130565b6001546001600160a01b03166102a3565b61030b610306366004611661565b611147565b604051610176969594939291906116ee565b61024e61032b366004611661565b611270565b61016561033e366004611726565b6004602052600090815260409020805460019091015482565b610192610365366004611726565b61139d565b610192610378366004611661565b6113c5565b6000806000600460008560048111156103985761039861168a565b60ff16815260208082019290925260409081016000208151808301909252805480835260019091015491909201819052909590945092505050565b6103db611403565b60048360ff16111561042a5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b1bd8dac81c195c9a5bd9606a1b60448201526064015b60405180910390fd5b600082116104715760405162461bcd60e51b815260206004820152601460248201527304475726174696f6e206d757374206265203e20360641b6044820152606401610421565b600081116104c15760405162461bcd60e51b815260206004820152601760248201527f5265776172642072617465206d757374206265203e20300000000000000000006044820152606401610421565b604080518082018252838152602080820184815260ff8716600081815260048452859020935184559051600190930192909255825191825281018490529081018290527f39cd0121351387f7629ab5375d6ab53e57076f19d79c00e765d104e40b61cfa09060600160405180910390a1505050565b61053e611430565b600082116105835760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606401610421565b60048160048111156105975761059761168a565b60ff1611156105de5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b1bd8dac81c195c9a5bd9606a1b6044820152606401610421565b336000908152600360205260409020541561063b5760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206861766520616374697665207374616b65000000000000006044820152606401610421565b600061064561086a565b9050600061065482600a61183f565b61065e908561184e565b6002546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d09190611865565b6002549091506106eb906001600160a01b031633308561145a565b6002546040516370a0823160e01b815230600482015260009183916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190611865565b610766919061187e565b905060405180608001604052808281526020014281526020018660048111156107915761079161168a565b815260016020918201819052336000908152600383526040908190208451815592840151838301558301516002830180549192909160ff1916908360048111156107dd576107dd61168a565b021790555060608201518160020160016101000a81548160ff02191690831515021790555090505080600560008282546108179190611891565b909155505060405133907f8acf475137e0cd74ca7f611d16b1e6383ec9a9c71a8e5b85967781b9c7214d119061085090849089906118a4565b60405180910390a2505050506108666001600055565b5050565b6002546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa9250505080156108d0575060408051601f3d908101601f191682019092526108cd918101906118b8565b60015b6108da5750601290565b919050565b6108e7611403565b600254600160a01b900460ff166109405760405162461bcd60e51b815260206004820152601860248201527f546f6b656e206368616e67652069732064697361626c656400000000000000006044820152606401610421565b6001600160a01b03811661098e5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610421565b600554156109f75760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f74206368616e676520746f6b656e207768656e207468657265206160448201526f726520616374697665207374616b657360801b6064820152608401610421565b6002546040516001600160a01b038084169216907fec507b76e4056f09193394a4361b44129ec561809ddee312c7f97121f93bb58b90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b610a5b611430565b3360009081526003602090815260408083208151608081018352815481526001820154938101939093526002810154909183019060ff166004811115610aa357610aa361168a565b6004811115610ab457610ab461168a565b815260029190910154610100900460ff1615156020909101528051909150610b095760405162461bcd60e51b81526020600482015260086024820152674e6f207374616b6560c01b6044820152606401610421565b8060600151610b4d5760405162461bcd60e51b815260206004820152601060248201526f5374616b65206e6f742061637469766560801b6044820152606401610421565b60006004600083604001516004811115610b6957610b6961168a565b60ff1681526020808201929092526040908101600020815180830190925280548083526001909101548284015291840151909250610ba79190611891565b421015610bf65760405162461bcd60e51b815260206004820152601960248201527f4c6f636b20706572696f64206e6f7420636f6d706c65746564000000000000006044820152606401610421565b6000610c0133611270565b90506000818460000151610c159190611891565b9050836000015160056000828254610c2d919061187e565b909155505033600081815260036020526040812081815560018101919091556002908101805461ffff1916905554610c71916001600160a01b0390911690836114c7565b8351604080519182526020820184905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a250505050610cbc6001600055565b565b6001600160a01b0381166000908152600360209081526040808320815160808101835281548152600182015493810193909352600281015484939283019060ff166004811115610d1057610d1061168a565b6004811115610d2157610d2161168a565b815260029190910154610100900460ff16151560209091015280519091501580610d4d57508060600151155b15610d5b5750600092915050565b60006004600083604001516004811115610d7757610d7761168a565b60ff1681526020808201929092526040908101600090812082518084019093528054808452600190910154838501529285015191935091610db791611891565b9050804210610dcb57506000949350505050565b610dd5428261187e565b95945050505050565b610de6611403565b6002805460ff60a01b1916600160a01b179055565b610e03611403565b610cbc60006114fd565b610e15611430565b3360009081526003602090815260408083208151608081018352815481526001820154938101939093526002810154909183019060ff166004811115610e5d57610e5d61168a565b6004811115610e6e57610e6e61168a565b815260029190910154610100900460ff1615156020909101528051909150610ec35760405162461bcd60e51b81526020600482015260086024820152674e6f207374616b6560c01b6044820152606401610421565b8060600151610f075760405162461bcd60e51b815260206004820152601060248201526f5374616b65206e6f742061637469766560801b6044820152606401610421565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190611865565b9050600081836000015111610f8a578251610f8c565b815b9050826000015160056000828254610fa4919061187e565b90915550503360009081526003602052604081208181556001810191909155600201805461ffff191690558015610fec57600254610fec906001600160a01b031633836114c7565b60405181815233907fb7eb776ef583a719429ef1d1fa5f886dd63c2df82bd8da540ac25bdc81c4a1349060200160405180910390a2505050610cbc6001600055565b6001600160a01b0381166000908152600360209081526040808320815160808101835281548152600182015493810193909352600281015484939283019060ff1660048111156110805761108061168a565b60048111156110915761109161168a565b815260029190910154610100900460ff161515602090910152805190915015806110bd57508060600151155b156110cb5750600092915050565b600060046000836040015160048111156110e7576110e761168a565b60ff16815260208082019290925260409081016000208151808301909252805480835260019091015482840152918401519092506111259190611891565b421015949350505050565b611138611403565b6002805460ff60a01b19169055565b600080600080600080600060036000896001600160a01b03166001600160a01b0316815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660048111156111ba576111ba61168a565b60048111156111cb576111cb61168a565b81526020016002820160019054906101000a900460ff1615151515815250509050600060046000836040015160048111156112085761120861168a565b60ff168152602080820192909252604090810160002081518083018352815480825260019092015481850152855193860151928601516060870151919550916112519084611891565b61125a8e611270565b949e939d50919b50995097509095509350505050565b6001600160a01b0381166000908152600360209081526040808320815160808101835281548152600182015493810193909352600281015484939283019060ff1660048111156112c2576112c261168a565b60048111156112d3576112d361168a565b815260029190910154610100900460ff161515602090910152805190915015806112ff57508060600151155b1561130d5750600092915050565b600060046000836040015160048111156113295761132961168a565b60ff16815260208082019290925260409081016000208151808301909252805480835260019091015482840152918401519092506113679190611891565b421015611378575060009392505050565b6020810151825160649161138b9161184e565b61139591906118d5565b949350505050565b6113a5611403565b6001805460ff909216600160a01b0260ff60a01b19909216919091179055565b6113cd611403565b6001600160a01b0381166113f757604051631e4fbdf760e01b815260006004820152602401610421565b611400816114fd565b50565b6001546001600160a01b03163314610cbc5760405163118cdaa760e01b8152336004820152602401610421565b60026000540361145357604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b0384811660248301528381166044830152606482018390526114c19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061154f565b50505050565b6040516001600160a01b038381166024830152604482018390526114f891859182169063a9059cbb9060640161148f565b505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080602060008451602086016000885af180611572576040513d6000823e3d81fd5b50506000513d9150811561158a578060011415611597565b6001600160a01b0384163b155b156114c157604051635274afe760e01b81526001600160a01b0385166004820152602401610421565b8035600581106108da57600080fd5b6000602082840312156115e157600080fd5b6115ea826115c0565b9392505050565b60ff8116811461140057600080fd5b60008060006060848603121561161557600080fd5b8335611620816115f1565b95602085013595506040909401359392505050565b6000806040838503121561164857600080fd5b82359150611658602084016115c0565b90509250929050565b60006020828403121561167357600080fd5b81356001600160a01b03811681146115ea57600080fd5b634e487b7160e01b600052602160045260246000fd5b600581106116be57634e487b7160e01b600052602160045260246000fd5b9052565b84815260208101849052608081016116dd60408301856116a0565b821515606083015295945050505050565b8681526020810186905260c0810161170960408301876116a0565b9315156060820152608081019290925260a0909101529392505050565b60006020828403121561173857600080fd5b81356115ea816115f1565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561179457816000190482111561177a5761177a611743565b8085161561178757918102915b93841c939080029061175e565b509250929050565b6000826117ab57506001611839565b816117b857506000611839565b81600181146117ce57600281146117d8576117f4565b6001915050611839565b60ff8411156117e9576117e9611743565b50506001821b611839565b5060208310610133831016604e8410600b8410161715611817575081810a611839565b6118218383611759565b806000190482111561183557611835611743565b0290505b92915050565b60006115ea60ff84168361179c565b808202811582820484141761183957611839611743565b60006020828403121561187757600080fd5b5051919050565b8181038181111561183957611839611743565b8082018082111561183957611839611743565b828152604081016115ea60208301846116a0565b6000602082840312156118ca57600080fd5b81516115ea816115f1565b6000826118f257634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200195d95659b4ce69cecad8fc91f7167d935369f9c96862130d0df8952f8a127164736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 846,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 934,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "tokenDecimals",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 937,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)315"
      },
      {
        "astId": 939,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "isTokenChangeable",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 965,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Stake)960_storage)"
      },
      {
        "astId": 970,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "lockOptions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_struct(LockOption)950_storage)"
      },
      {
        "astId": 972,
        "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)315": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(LockPeriod)945": {
        "encoding": "inplace",
        "label": "enum EnhancedStaking.LockPeriod",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Stake)960_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnhancedStaking.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)960_storage"
      },
      "t_mapping(t_uint8,t_struct(LockOption)950_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct EnhancedStaking.LockOption)",
        "numberOfBytes": "32",
        "value": "t_struct(LockOption)950_storage"
      },
      "t_struct(LockOption)950_storage": {
        "encoding": "inplace",
        "label": "struct EnhancedStaking.LockOption",
        "members": [
          {
            "astId": 947,
            "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 949,
            "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
            "label": "rewardRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)960_storage": {
        "encoding": "inplace",
        "label": "struct EnhancedStaking.Stake",
        "members": [
          {
            "astId": 952,
            "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 954,
            "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 957,
            "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
            "label": "lockPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(LockPeriod)945"
          },
          {
            "astId": 959,
            "contract": "contracts/EnhancedStaking.sol:EnhancedStaking",
            "label": "isLocked",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}